% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/file_management.R
\name{combine_text_files}
\alias{combine_text_files}
\title{Combine Text File Contents into a Single File}
\usage{
combine_text_files(
  path = ".",
  pattern,
  output_file,
  separator = "\\n\\n\\n\\n\\n",
  remove_files = FALSE,
  all.files = FALSE,
  recursive = FALSE,
  ignore.case = FALSE,
  include.dirs = FALSE,
  no.. = FALSE
)
}
\arguments{
\item{path}{a character vector of full path names; the default
    corresponds to the working directory, \code{\link[base]{getwd}()}.  Tilde
    expansion (see \code{\link[base]{path.expand}}) is performed.  Missing
    values will be ignored.  Elements with a marked encoding will
    be converted to the native encoding (and if that fails, considered
    non-existent).}

\item{pattern}{an optional \link[base]{regular expression}.  Only file names
    which match the regular expression will be returned.}

\item{output_file}{Path to a file that combined files will be written to. This file will not be overwritten if it already exists.}

\item{separator}{Pattern that separates the text from the other files in the combined output.}

\item{remove_files}{If TRUE, removes each file after it is appended to the `output_file`. Defaults to FALSE.}

\item{all.files}{a logical value.  If \code{FALSE}, only the
    names of visible files are returned (following Unix-style visibility,
    that is files whose name does not start with a dot).  If \code{TRUE},
    all file names will be returned.}

\item{recursive}{logical.  Should the listing recurse into directories?}

\item{ignore.case}{logical.  Should pattern-matching be case-insensitive?}

\item{include.dirs}{logical.  Should subdirectory names be included in
    recursive listings?  (They always are in non-recursive ones).}

\item{no..}{logical.  Should both \code{"."} and \code{".."} be excluded
    also from non-recursive listings?}
}
\description{
Read text from a list of files with names matching a pattern, combine into a single output file. An error will be thrown if the output file already exists.
}
\section{Use Cases}{

In R package file management, sometimes R directory files need to be grouped into function families. This can be done by using this function to first write the group of functions to a new file.
}

